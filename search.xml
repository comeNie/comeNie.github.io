<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux命令(9)-touch]]></title>
    <url>%2F2017%2F08%2F15%2Flinux%E5%91%BD%E4%BB%A4-9-touch%2F</url>
    <content type="text"><![CDATA[linux命令之touch命令命令格式touch [选项] [文件名] 参数说明 -a 或–time=atime或–time=access或–time=use 只更改存取时间。 -c 或–no-create 不建立任何文档。 -d 使用指定的日期时间，而非现在的时间。 -f 此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题。 -m 或–time=mtime或–time=modify 只更改变动时间。 -r 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。 -t 使用指定的日期时间，而非现在的时间。 示例 创建不存在的文件touch test 更新test的时间和test1一样touch -r test test1 设定文件的时间戳touch -t 201211142234.50 log.log]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础系列-HashMap]]></title>
    <url>%2F2017%2F08%2F15%2Fbasic-HashMap%2F</url>
    <content type="text"><![CDATA[基础系列-HashMap签名public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable 说明： 标记接口Cloneable，表明对象会重写java.lang.Object#clone()方法,HashMap实现的是浅拷贝 标记接口Serializable,表明HashMap可以被序列化 HashMap同时继承了抽象类AbstractMap与接口Map 1public abstract class AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt; 示意：在语法层面继承接口Map是多余的，这么做仅仅是为了让阅读代码的人明确知道HashMap是属于Map体系的，起到了文档的作用 设计###哈希表HashMap是一种基于哈希表（hash table）实现的map.概念：key经过hash函数作用后得到一个槽（buckets或slots）的索引（index），槽中保存着我们想要获取的值图示： HashMap特点 线程非安全，并且允许key与value都为null值，HashTable与之相反，为线程安全，key与value都不允许null值。 不保证其内部元素的顺序，而且随着时间的推移，同一元素的位置也可能改变（resize的情况） put、get操作的时间复杂度为O(1)。 遍历其集合视角的时间复杂度与其容量（capacity，槽的个数）和现有元素的大小（entry的个数）成正比，所以如果遍历的性能要求很高，不要把capactiy设置的过高或把平衡因子（load factor，当entry数大于capacity*loadFactor时，会进行resize，reside会导致key进行rehash）设置的过低。 由于HashMap是线程非安全的，这也就是意味着如果多个线程同时对一hashmap的集合试图做迭代时有结构的上改变（添加、删除entry，只改变entry的value的值不算结构改变），那么会报ConcurrentModificationException，专业术语叫fail-fast，尽早报错对于多线程程序来说是很有必要的。 Map m = Collections.synchronizedMap(new HashMap(…)); 通过这种方式可以得到一个线程安全的map。 源码解析构造函数除去常规的构造函数，HashMap提供了构造函数用于设置容量（capacity）与平衡因子（loadFactor）。 12345678910111213141516171819public HashMap(int initialCapacity, float loadFactor) &#123; if (initialCapacity &lt; 0) throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; + initialCapacity); if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(&quot;Illegal load factor: &quot; + loadFactor); this.loadFactor = loadFactor; threshold = initialCapacity; init();&#125;public HashMap(int initialCapacity) &#123; this(initialCapacity, DEFAULT_LOAD_FACTOR);&#125;public HashMap() &#123; this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);&#125; 其中默认值： 12345678910111213141516/** * The default initial capacity - MUST be a power of two. */ static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16/** * The maximum capacity, used if a higher value is implicitly specified * by either of the constructors with arguments. * MUST be a power of two &lt;= 1&lt;&lt;30. */ static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;/** * The load factor used when none specified in constructor. */ static final float DEFAULT_LOAD_FACTOR = 0.75f; 默认的平衡因子为0.75，过高的因子会降低存储空间但是查找（lookup，包括HashMap中的put与get方法）的时间就会增加。 容量必须为2的指数倍（默认为16） 哈希函数设计在哈希表容量（也就是buckets或slots大小）为length的情况下，为了使每个key都能在冲突最小的情况下映射到[0,length)（注意是左闭右开区间）的索引（index）内，一般有两种做法： 让length为素数，然后用hashCode(key) mod length的方法得到索引 让length为2的指数倍，然后用hashCode(key) &amp; (length-1)的方法得到索引length为2的指数倍，所以length-1所对应的二进制位都为1，然后在与hashCode(key)做与运算，即可得到[0,length)内的索引 HashMap.Entry（–1.7）HashMap中存放的是HashMap.Entry对象，它继承自Map.Entry 123456789101112131415161718192021222324252627282930 static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final K key; V value; Entry&lt;K,V&gt; next; int hash; Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123; value = v; next = n; key = k; hash = h; &#125; // setter, getter, equals, toString 方法省略 public final int hashCode() &#123; //用key的hash值与上value的hash值作为Entry的hash值 return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue()); &#125; /** * This method is invoked whenever the value in an entry is * overwritten by an invocation of put(k,v) for a key k that&apos;s already * in the HashMap. */ void recordAccess(HashMap&lt;K,V&gt; m) &#123; &#125; /** * This method is invoked whenever the entry is * removed from the table. */ void recordRemoval(HashMap&lt;K,V&gt; m) &#123; &#125;&#125; Node实现了单向链表的功能，用next成员变量来级连起来。 冲突解决（链地址法）12345/** * The table, resized as necessary. Length MUST Always be a power of two. *///HashMap内部维护了一个为数组类型的Entry变量table，用来保存添加进来的Entry对象transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE; 操作get操作123456789101112131415161718192021222324252627282930313233343536public V get(Object key) &#123; //单独处理key为null的情况 if (key == null) return getForNullKey(); Entry&lt;K,V&gt; entry = getEntry(key); return null == entry ? null : entry.getValue();&#125;private V getForNullKey() &#123; if (size == 0) &#123; return null; &#125; //key为null的Entry用于放在table[0]中，但是在table[0]冲突链中的Entry的key不一定为null //所以需要遍历冲突链，查找key是否存在 for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123; if (e.key == null) return e.value; &#125; return null;&#125;final Entry&lt;K,V&gt; getEntry(Object key) &#123; if (size == 0) &#123; return null; &#125; int hash = (key == null) ? 0 : hash(key); //首先定位到索引在table中的位置 //然后遍历冲突链，查找key是否存在 for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; &#125; return null;&#125; put操作（含update操作）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113private void inflateTable(int toSize) &#123; //辅助函数，用于填充HashMap到指定的capacity // Find a power of 2 &gt;= toSize int capacity = roundUpToPowerOf2(toSize); //threshold为resize的阈值，超过后HashMap会进行resize，内容的entry会进行rehash threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1); table = new Entry[capacity]; initHashSeedAsNeeded(capacity);&#125;/** * Associates the specified value with the specified key in this map. * If the map previously contained a mapping for the key, the old * value is replaced. */public V put(K key, V value) &#123; if (table == EMPTY_TABLE) &#123; inflateTable(threshold); &#125; if (key == null) return putForNullKey(value); int hash = hash(key); int i = indexFor(hash, table.length); //这里的循环是关键 //当新增的key所对应的索引i，对应table[i]中已经有值时，进入循环体 for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; //判断是否存在本次插入的key，如果存在用本次的value替换之前oldValue，相当于update操作 //并返回之前的oldValue if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; &#125; &#125; //如果本次新增key之前不存在于HashMap中，modCount加1，说明结构改变了 modCount++; addEntry(hash, key, value, i); return null;&#125;void addEntry(int hash, K key, V value, int bucketIndex) &#123; //如果增加一个元素会后，HashMap的大小超过阈值，需要resize if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123; //增加的幅度是之前的1倍 resize(2 * table.length); hash = (null != key) ? hash(key) : 0; bucketIndex = indexFor(hash, table.length); &#125; createEntry(hash, key, value, bucketIndex);&#125;void createEntry(int hash, K key, V value, int bucketIndex) &#123; //首先得到该索引处的冲突链Entries，第一次插入bucketIndex位置时冲突链为null，也就是e为null Entry&lt;K,V&gt; e = table[bucketIndex]; //然后把新的Entry添加到冲突链的开头，也就是说，后插入的反而在前面（第一次还真没看明白） //table[bucketIndex]为新加入的Entry，是bucketIndex位置的冲突链的第一个元素 table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e); size++;&#125;//下面看看HashMap是如何进行resize，庐山真面目就要揭晓了😊void resize(int newCapacity) &#123; Entry[] oldTable = table; int oldCapacity = oldTable.length; //如果已经达到最大容量，那么就直接返回 if (oldCapacity == MAXIMUM_CAPACITY) &#123; threshold = Integer.MAX_VALUE; return; &#125; Entry[] newTable = new Entry[newCapacity]; //initHashSeedAsNeeded(newCapacity)的返回值决定了是否需要重新计算Entry的hash值 transfer(newTable, initHashSeedAsNeeded(newCapacity)); table = newTable; threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);&#125;/** * Transfers all entries from current table to newTable. */void transfer(Entry[] newTable, boolean rehash) &#123; int newCapacity = newTable.length; //遍历当前的table，将里面的元素添加到新的newTable中 for (Entry&lt;K,V&gt; e : table) &#123; while(null != e) &#123; Entry&lt;K,V&gt; next = e.next; if (rehash) &#123; e.hash = null == e.key ? 0 : hash(e.key); &#125; int i = indexFor(e.hash, newCapacity); e.next = newTable[i]; //最后这两句用了与put放过相同的技巧 //将后插入的反而在前面 newTable[i] = e; e = next; &#125; &#125;&#125;/** * Initialize the hashing mask value. We defer initialization until we * really need it. */final boolean initHashSeedAsNeeded(int capacity) &#123; boolean currentAltHashing = hashSeed != 0; boolean useAltHashing = sun.misc.VM.isBooted() &amp;&amp; (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD); //这里说明了，在hashSeed不为0或满足useAltHash时，会重算Entry的hash值 //至于useAltHashing的作用可以参考下面的链接 // http://stackoverflow.com/questions/29918624/what-is-the-use-of-holder-class-in-hashmap boolean switching = currentAltHashing ^ useAltHashing; if (switching) &#123; hashSeed = useAltHashing ? sun.misc.Hashing.randomHashSeed(this) : 0; &#125; return switching;&#125; remove操作1234567891011121314151617181920212223242526272829303132333435public V remove(Object key) &#123; Entry&lt;K,V&gt; e = removeEntryForKey(key); //可以看到删除的key如果存在，就返回其所对应的value return (e == null ? null : e.value);&#125;final Entry&lt;K,V&gt; removeEntryForKey(Object key) &#123; if (size == 0) &#123; return null; &#125; int hash = (key == null) ? 0 : hash(key); int i = indexFor(hash, table.length); //这里用了两个Entry对象，相当于两个指针，为的是防治冲突链发生断裂的情况 //这里的思路就是一般的单向链表的删除思路 Entry&lt;K,V&gt; prev = table[i]; Entry&lt;K,V&gt; e = prev; //当table[i]中存在冲突链时，开始遍历里面的元素 while (e != null) &#123; Entry&lt;K,V&gt; next = e.next; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) &#123; modCount++; size--; if (prev == e) //当冲突链只有一个Entry时 table[i] = next; else prev.next = next; e.recordRemoval(this); return e; &#125; prev = e; e = next; &#125; return e;&#125; fast-fail的HashIterator集合类用Iterator类来遍历其包含的元素，接口Enumeration已经不推荐使用。相比Enumeration，Iterator有下面两个优势： Iterator允许调用者在遍历集合类时删除集合类中包含的元素（相比Enumeration增加了remove方法） 比Enumeration的命名更简短 HashMap中提供的三种集合视角，底层都是用HashIterator实现的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960private abstract class HashIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123; Entry&lt;K,V&gt; next; // next entry to return //在初始化Iterator实例时，纪录下当前的修改次数 int expectedModCount; // For fast-fail int index; // current slot Entry&lt;K,V&gt; current; // current entry HashIterator() &#123; expectedModCount = modCount; if (size &gt; 0) &#123; // advance to first entry Entry[] t = table; //遍历HashMap的table，依次查找元素 while (index &lt; t.length &amp;&amp; (next = t[index++]) == null) ; &#125; &#125; public final boolean hasNext() &#123; return next != null; &#125; final Entry&lt;K,V&gt; nextEntry() &#123; //在访问下一个Entry时，判断是否有其他线程有对集合的修改 //说明HashMap是线程非安全的 if (modCount != expectedModCount) throw new ConcurrentModificationException(); Entry&lt;K,V&gt; e = next; if (e == null) throw new NoSuchElementException(); if ((next = e.next) == null) &#123; Entry[] t = table; while (index &lt; t.length &amp;&amp; (next = t[index++]) == null) ; &#125; current = e; return e; &#125; public void remove() &#123; if (current == null) throw new IllegalStateException(); if (modCount != expectedModCount) throw new ConcurrentModificationException(); Object k = current.key; current = null; HashMap.this.removeEntryForKey(k); expectedModCount = modCount; &#125;&#125;private final class ValueIterator extends HashIterator&lt;V&gt; &#123; public V next() &#123; return nextEntry().value; &#125;&#125;private final class KeyIterator extends HashIterator&lt;K&gt; &#123; public K next() &#123; return nextEntry().getKey(); &#125;&#125;private final class EntryIterator extends HashIterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123; public Map.Entry&lt;K,V&gt; next() &#123; return nextEntry(); &#125;&#125; 序列化保存Entry的数组为transient的。如何序列化？HashMap重写了writeObject与readObject 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677private void writeObject(java.io.ObjectOutputStream s) throws IOException&#123; // Write out the threshold, loadfactor, and any hidden stuff s.defaultWriteObject(); // Write out number of buckets if (table==EMPTY_TABLE) &#123; s.writeInt(roundUpToPowerOf2(threshold)); &#125; else &#123; s.writeInt(table.length); &#125; // Write out size (number of Mappings) s.writeInt(size); // Write out keys and values (alternating) if (size &gt; 0) &#123; for(Map.Entry&lt;K,V&gt; e : entrySet0()) &#123; s.writeObject(e.getKey()); s.writeObject(e.getValue()); &#125; &#125;&#125;private static final long serialVersionUID = 362498820763181265L;private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException&#123; // Read in the threshold (ignored), loadfactor, and any hidden stuff s.defaultReadObject(); if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) &#123; throw new InvalidObjectException(&quot;Illegal load factor: &quot; + loadFactor); &#125; // set other fields that need values table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE; // Read in number of buckets s.readInt(); // ignored. // Read number of mappings int mappings = s.readInt(); if (mappings &lt; 0) throw new InvalidObjectException(&quot;Illegal mappings count: &quot; + mappings); // capacity chosen by number of mappings and desired load (if &gt;= 0.25) int capacity = (int) Math.min( mappings * Math.min(1 / loadFactor, 4.0f), // we have limits... HashMap.MAXIMUM_CAPACITY); // allocate the bucket array; if (mappings &gt; 0) &#123; inflateTable(capacity); &#125; else &#123; threshold = capacity; &#125; init(); // Give subclass a chance to do its thing. // Read the keys and values, and put the mappings in the HashMap for (int i = 0; i &lt; mappings; i++) &#123; K key = (K) s.readObject(); V value = (V) s.readObject(); putForCreate(key, value); &#125;&#125;private void putForCreate(K key, V value) &#123; int hash = null == key ? 0 : hash(key); int i = indexFor(hash, table.length); /** * Look for preexisting entry for key. This will never happen for * clone or deserialize. It will only happen for construction if the * input Map is a sorted map whose ordering is inconsistent w/ equals. */ for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) &#123; e.value = value; return; &#125; &#125; createEntry(hash, key, value, i);&#125;]]></content>
      <categories>
        <category>java</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(8)-cp]]></title>
    <url>%2F2017%2F08%2F13%2Flinux%E5%91%BD%E4%BB%A4-8-cp%2F</url>
    <content type="text"><![CDATA[linux命令之ls命令命令格式12cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_filecp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ... target_directory 参数说明 -a，同-pPR 选项. -f，–force 如果目标文件无法打开则将其移除并重试(当-n 选项存在时则不需再选此项) -H，跟随源文件中的命令行符号链接 -i，覆盖前询问 -L,总是跟随符号链接 -n，不要覆盖已存在的文件(使前面的 -i 选项失效) -P，不跟随源文件中的符号链接 -p，等于–preserve=模式,所有权,时间戳–preserve[=属性列表 保持指定的属性(默认：模式,所有权,时间戳)，如果可能保持附加属性：环境、链接、xattr 等 -R，复制目录及目录内的所有项目 -v, 显示执行过程 -X，不要复制扩展信息。]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(7)-mv]]></title>
    <url>%2F2017%2F08%2F13%2Flinux%E5%91%BD%E4%BB%A4-7-mv%2F</url>
    <content type="text"><![CDATA[linux命令之ls命令命令格式mv [选项] 源文件或目录 目标文件或目录 参数说明 -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖 -u ：若目标文件已经存在，且 source 比较新，才会更新(update) 示例 文件改名mv test test1 移动文件mv test.log test/ 将文件log1.txt,log2.txt,log3.txt移动到目录test3中mv log1.txt log2.txt log3.txt test3mv -t /opt/soft/test/test4/ log1.txt log2.txt log3.txt]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(6)-rmdir]]></title>
    <url>%2F2017%2F08%2F13%2Flinux%E5%91%BD%E4%BB%A4-6-rmdir%2F</url>
    <content type="text"><![CDATA[linux命令之rmdir命令命令格式rmdir [选项] [目录] 命令说明删除目录必须为空目录，当级联删除目录时，子目录必须也为空 参数说明 -p 递归删除 -v –verbose 显示指令执行过程 示例 删除目录rmdir test 级联删除目录rmdir -p test]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(5)-rm]]></title>
    <url>%2F2017%2F08%2F09%2Flinux%E5%91%BD%E4%BB%A4-5-rm%2F</url>
    <content type="text"><![CDATA[linux命令之rm命令格式rm [选项] 文件 参数 -f, –force 忽略不存在的文件，从不给出提示。 -i, –interactive 进行交互式删除 -r, -R, –recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。 -v, –verbose 详细显示进行的步骤 –help 显示此帮助信息并退出 –version 输出版本信息并退出 示例 删除文件rm test 强制删除文件rm -f test 递归删除rm -r test 删除以log结尾文件rm *.log 自定义回收站功能 123456myrm()&#123; D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p $D; mv &quot;$@&quot; $D &amp;&amp; echo &quot;moved to $D ok&quot;; &#125;alias rm=&apos;myrm&apos;]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(4)-mkdir]]></title>
    <url>%2F2017%2F08%2F09%2Flinux%E5%91%BD%E4%BB%A4-4-mkdir%2F</url>
    <content type="text"><![CDATA[linux命令之mkdir命令格式mkdir [选项] 目录 参数 -m, –mode=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask -p, –parents 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录; -v, –verbose 每次创建新目录都显示信息--help 显示此帮助信息并退出 --version 输出版本信息并退出 示例 创建一个空目录mkdir test 级联创建目录mkdir -p test/test1 创建权限为777的目录mkdir -m 777 test 创建新目录都显示信息mkdir -v test 创建项目的目录结构mkdir mkdir -vp scf/{lib/,bin/,doc/{info,product},logs/{info,product},service/deploy/{info,product}}]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(3)-pwd]]></title>
    <url>%2F2017%2F08%2F08%2Flinux%E5%91%BD%E4%BB%A4-3-pwd%2F</url>
    <content type="text"><![CDATA[linux命令之pwd命令命令格式pwd [选项] 参数说明一般情况下不带任何参数如果目录是链接时：格式：pwd -P 显示出实际路径，而非使用连接（link）路径。 示例 显示当前目录完成路径pwd 目录连接链接时，pwd -P 显示出实际路径，而非使用连接（link）路径；pwd显示的是连接路径]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(2)-cd]]></title>
    <url>%2F2017%2F08%2F08%2Flinux%E5%91%BD%E4%BB%A4-2-cd%2F</url>
    <content type="text"><![CDATA[linux命令之cd命令命令格式cd [目录名] 示例 进入根目录cd / 进入上级目录cd .. 进入用户目录cd ~ 进入上一次目录cd - 把上个命令的参数作为cd参数使用cd !$]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iterm快捷键]]></title>
    <url>%2F2017%2F08%2F07%2Fiterm%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[iterm快捷键标签 新建标签 command + t 关闭标签 command + w 切换标签 command + 数字 或 command + 左右方向键 查找 command + enter 分屏 垂直分屏 command + d 水平分屏 command + shift + d 切换屏幕 command + option + 方向键 或者 command + [ 或 command + ] 查看历史命令 command + ; 查看剪贴板历史命令 command + shift + h 移动 到行首 ctrl + a 到行尾 ctrl + e 前进后退 ctrl + f/b 编辑 清除当前行 ctrl + u 上一条命令 ctrl + p 或者 !! 搜索命令历史 ctrl + r 删除当前光标的字符 ctrl + d 删除光标之前的字符 ctrl + h 删除光标之前的单词 ctrl + w 删除到文本末尾 ctrl + k 交换光标处文本 ctrl + t 清屏 ctrl + l 或者 command + r 输入开头命令后，command + ;会自动列出输入过的命令 剪贴板历史 command + shift + h]]></content>
      <categories>
        <category>快捷键</category>
      </categories>
      <tags>
        <tag>iterm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令(1)-ls]]></title>
    <url>%2F2017%2F08%2F07%2Flinux%E5%91%BD%E4%BB%A4-1-ls%2F</url>
    <content type="text"><![CDATA[linux命令之ls命令命令格式ls [选项] [目录] 说明： 列出目录中所有的子目录和文件 常用参数 -a, –all 列出目录下的所有文件，包括以 . 开头的隐含文件 -A 同-a，但不列出“.”(表示当前目录)和“..”(表示当前目录的父目录)。 -c 配合 -lt：根据 ctime 排序及显示 ctime (文件状态最后更改的时间)配合 -l：显示 ctime 但根据名称排序否则：根据 ctime 排序 -C 每栏由上至下列出项目 –color[=WHEN] 控制是否使用色彩分辨文件。WHEN 可以是’never’、’always’或’auto’其中之一 -d, –directory 将目录象文件一样显示，而不是显示其下的文件。 -D, –dired 产生适合 Emacs 的 dired 模式使用的结果 -f 对输出的文件不进行排序，-aU 选项生效，-lst 选项失效 -g 类似 -l,但不列出所有者 -G, –no-group 不列出任何有关组的信息 -h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G) –si 类似 -h,但文件大小取 1000 的次方而不是 1024 -H, –dereference-command-line 使用命令列中的符号链接指示的真正目的地 –indicator-style=方式 指定在每个项目名称后加上指示符号&lt;方式&gt;：none (默认)，classify (-F)，file-type (-p) -i, –inode 印出每个文件的 inode 号 -I, –ignore=样式 不印出任何符合 shell 万用字符&lt;样式&gt;的项目 -k 即 –block-size=1K,以 k 字节的形式表示文件的大小。 -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。 -L, –dereference 当显示符号链接的文件信息时，显示符号链接所指示的对象而并非符号链接本身的信息 -m 所有项目以逗号分隔，并填满整行行宽 -o 类似 -l,显示文件的除组信息外的详细信息。 -r, –reverse 依相反次序排列 -R, –recursive 同时列出所有子目录层 -s, –size 以块大小为单位列出所有文件的大小 -S 根据文件大小排序 –sort=WORD 以下是可选用的 WORD 和它们代表的相应选项： extension -X status -c none -U time -t size -S atime -u time -t access -u version -v use -u -t 以文件修改时间排序 -u 配合 -lt:显示访问时间而且依访问时间排序配合 -l:显示访问时间但根据名称排序否则：根据访问时间排序 -U 不进行排序;依文件系统原有的次序列出项目 -v 根据版本进行排序 -w, –width=COLS 自行指定屏幕宽度而不使用目前的数值 -x 逐行列出项目而不是逐栏列出 -X 根据扩展名排序 -1 每行只列出一个文件 –help 显示此帮助信息并离开 –version 显示版本信息并离开 示例 列举Downloads文件下的所有文件和目录ls -alR ~/Downloads 列举当前目录所有以t开头的文件的详细内容ls -al t* 列举当前文件夹下所有的子目录ls -F ~ | grep /$ 计算当前目录下的文件数和目录数ls -l * |grep &quot;^-&quot;|wc -l ---文件个数ls -l * |grep &quot;^d&quot;|wc -l ---目录个数 在ls中列出文件的绝对路径ls | sed &quot;s:^:pwd/:&quot; 列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归find $PWD -maxdepth 1 | xargs ls -ld 指定文件时间输出格式ls -tl --time-style=full-isols -ctl --time-style=long-iso]]></content>
      <categories>
        <category>linux每日命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
